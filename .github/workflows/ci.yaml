name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  eval:
    name: Evaluate flake
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.evaluate.outputs.matrix }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Evaluate matrix
        id: evaluate
        run: |
          set -eu
          echo "matrix=$(nix eval --show-trace --json .#githubWorkflow.matrix)" >> "$GITHUB_OUTPUT"

  build:
    needs: eval

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.eval.outputs.matrix) }}

    name: Build (${{ matrix.attr }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: "arm64"

      - name: Install Nix
        if: matrix.arch != 'aarch64'
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Install Nix (with aarch64)
        if: matrix.arch == 'aarch64'
        uses: DeterminateSystems/nix-installer-action@v9
        with:
          extra-conf: "extra-platforms = aarch64-linux arm-linux"

      - name: Setup Cachix
        uses: cachix/cachix-action@v13
        with:
          name: getchoo
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Run build
        run: |
          nix build -L --accept-flake-config .#${{ matrix.attr }}

  check:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    name: Check flake (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Cachix
        uses: cachix/cachix-action@v13
        with:
          name: getchoo
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Run check
        run: nix flake check --show-trace --accept-flake-config

  # https://github.com/orgs/community/discussions/26822#discussioncomment-3305794
  gate:
    needs: [build, check]

    name: CI Gate
    runs-on: ubuntu-latest

    if: always()

    steps:
      - name: Exit with result
        run: |
          build_result="${{ needs.build.result }}"
          check_result="${{ needs.check.result }}"

          results=("$build_result" "$check_result")

          for result in "${results[@]}"; do [ "$result" != "success" ] && exit 1; done

          exit 0
